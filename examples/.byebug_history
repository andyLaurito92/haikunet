n
c
exit
(JSON.parse paths_response.body)['paths']
paths_response.body
c
n
sources
c
exit
destinies
sources
exit
sources
exit
mac_value
host.mac
c
mac_value
host.mac
exit
sources_identifier
sources
exit
sources_identifier.value.params.select{ |p| p.name == 'mac' }.first.value
sources_identifier.value.params
sources_identifier.params
sources_identifier.
sources.class
sources
exit
destinies.size
destinies.first.class
destinies.class
destinies
sources.first.class
sources.size
sources.class
sources
exit
path.links.size
path.links
path.class
path
exit
@topology_provider.source_provider.get_path_between one_src, one_dst
exit
@topology_generator.topology_provider
@topology_generator
n
@topology_provider.source_provider
@topology_provider.c
@topology_provider
@topology_provider.source_provider
 @topology_provider.source_provider
exit
@topology_provider.class
c
@topology_provider.get_path_between one_src, one_dst
n
one_src
one_dst
c
one_src
n
one_dst
destinies.size
sources.size
sources.class
sources
one_src.class
one_src
exit
sources
exit
sources[1].class
sources[1]
sources.second
sources.first
sources.size
sources.class
sources
one_src
n
@topology_provider.get_path_between source destiny
@topology_provider.respond_to? :get_path_between
destiny
source
exit
host_identifier.value
host_identifier
exit
flow.value.params.select{ |param| param.name == 'src' }.first.value.value.params
flow.value.params.select{ |param| param.name == 'src' }.first.value.value
flow.value.params.select{ |param| param.name == 'src' }.first.value
flow.value.params.select{ |param| param.name == 'src' }.first
flow.value.params.select{ |param| param.name == 'src' }
flow.value.params
flow
exit
identifiers_in_flow_parameters
exit
identifiers_in_flow_parameters
n
identifiers_in_flow_parameters
exit
identifiers_in_flow_parameters
n
identifiers_in_flow_parameters
exit
identifiers_in_flow_parameters
exit
identifierValue
n
c
found
n
value
host.ips
c
host.ips
c
host.ips
c
host.ips
c
exit
found
c
host.ips
c
value
host.ips
c
found
c
value
host.ips
c
exit
n
host.ips
c
host.ips
c
value
host.ips
c
exit
host.ips
n
host.ips.include? value
host.ips
c
host.ips
c
value
host.ips
c
exit
c
identifierValue
exit
n
identifierValue
exit
MacAddress.valid? "22:C9:32:BB:66:Cf3"
exit
MacAddress.valid? "22:C9:32:BB:66:Cf3"
MacAddress.valid "22:C9:32:BB:66:Cf3"
exit
MacAddress.valid "22:C9:32:BB:66:Cf3"
MacAddress.valid "22:C9:32:BB:66:C3"
MacAddress.valid "22:C9:32:00:66:C3"
MacAddress.valid "pepito"
MacAddress.valid "22:C9:32:00:63:C3"
MacAddress.valid? "22:C9:32:00:63:C3"
MacAddress.respond_to? :valid
MacAddress.respond_to? valid
exit
MacAddress.valid
MacAddress::valid
MacAddress
exit
identifierValue
n
identifierValue
c
exit
c
identifierValue
c
identifiers_in_flow_parameters
identifierValue
c
value
c
value
c
value
c
host.ips.include? value
host.ips
c
host.ips.include? value
host.ips
c
host.ips.include? value
host.ips
exit
host.ips
c
host.ips
host.ips.include? value
c
value
host.ips.include? value
host.ips
c
identifierValue
n
my_hash.key? "source"
exit
topology_generator.respond_to? :initialize
topology_generator.respond_to? :validate
exit
topology_generator.respond_to? :generate
topology_generator.methods
topology_generator.class
topology_generator
exit
ex.message
ex.class
ex
